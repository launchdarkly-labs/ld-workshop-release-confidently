#!/bin/bash

# 
# Create the flag trigger and get the trigger URL
# 
TRIGGER_URL=$(curl -s -X POST \
  'https://app.launchdarkly.com/api/v2/flags/'$LD_PROJECT_KEY'/updated-billing-ui/triggers/test' \
  -H 'Authorization: '$LAUNCHDARKLY_ACCESS_TOKEN'' \
  -H 'Content-Type: application/json' \
  -d '{
    "instructions": [
      {
        "kind": "turnFlagOff"
      }
    ],
    "integrationKey": "generic-trigger"
  }' | jq -r '.triggerURL')
echo $TRIGGER_URL

cat > /opt/ld/talkin-ship-workshop-app/src/hooks/useErrorHandling.ts <<EOF
// hooks/useErrorHandling.ts
import { useState } from 'react';
import { useShoppingCart } from 'use-shopping-cart';

const useErrorHandling = () => {
  const triggerUrl = '$TRIGGER_URL';
  const [errorState, setErrorState] = useState(false);

  const { clearCart } = useShoppingCart();

  const Trigger = async () => {
    try {
      const response = await fetch(
        triggerUrl,
        {
          method: "POST",
          body: JSON.stringify({
            eventName: "There was an error with the API",
          }),
        }
      );
      return response.status;
    } catch (error) {
      console.log("the fetch did not work");
    }
  };

  const errorTesting = async () => {
    try {
      const response = await fetch("/api/checkout", {
        method: "GET",
        headers: { "Content-Type": "application/json" },
      });
      const jsonData = await response.json();
      if (jsonData == "the API is unreachable") {
        setErrorState(true);
         clearCart()
         Trigger()
        return 502;
      } else {
        setErrorState(false);
      }
    } catch (e) {
      console.log("is it running?");
      console.log(e)
    }
  };

  return { errorState, setErrorState, errorTesting };
};

export default useErrorHandling;
EOF

exit 0
